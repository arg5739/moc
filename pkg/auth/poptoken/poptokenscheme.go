package poptoken

import (
	"sync"
	"time"
)

const (
	tokenType = "token_type"
	reqCnf    = "req_cnf"
)

// Implements the interface for MSAL SDK to callback when creating the poptoken.
// See AuthenticationScheme interface in https://github.com/AzureAD/microsoft-authentication-library-for-go/blob/main/apps/internal/oauth/ops/authority/authority.go#L146
type PopTokenAuthScheme struct {
	shrPopToken               *popToken
	claims                    map[string]interface{}
	currRsaKeyPair            *RsaKeyPair
	rsaKeyPairRefreshInterval time.Duration
	rsaKeyPairRefreshMutex    sync.Mutex
}

// Return the claim containg the pop token kid that will be added to the Entra access token.
func (a *PopTokenAuthScheme) TokenRequestParams() map[string]string {
	return map[string]string{
		tokenType: a.shrPopToken.Header.Typ,
		reqCnf:    a.shrPopToken.GetReqCnf(),
	}
}

// Return the keyId for MSAL to lookup for a cached access token. If it does not exist, MSAL will request a new access token
func (a *PopTokenAuthScheme) KeyID() string {
	return a.shrPopToken.Header.Kid
}

// Generate the pop token; adding in the accessToken generated by Entra.
func (a *PopTokenAuthScheme) FormatAccessToken(accessToken string) (string, error) {
	// append accessToken and our custom claims to the pop token.
	// Note custom claims should be compatible with JWT specs, we don't expect these claims to be complex
	return a.shrPopToken.GenerateToken(accessToken, time.Now(), a.claims)
}

// Return the token type. Must be "pop"
func (a *PopTokenAuthScheme) AccessTokenType() string {
	return a.shrPopToken.Header.Typ
}

// Create a new instance of PopTokenAuthScheme. Pass in the custom claims to be set in the pop token here, e.g. resourceId
func NewPopTokenAuthScheme(claims map[string]interface{}, rsaKeyPair *RsaKeyPair) (*PopTokenAuthScheme, error) {
	shrPopToken, err := NewPopToken(rsaKeyPair)
	if err != nil {
		return nil, err
	}

	return &PopTokenAuthScheme{
		shrPopToken: shrPopToken,
		claims:      claims,
	}, nil
}
