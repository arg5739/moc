package poptoken

import "github.com/google/uuid"

// Implements the interface for MSAL SDK to callback when creating the poptoken.
// See AuthenticationScheme interface in https://github.com/AzureAD/microsoft-authentication-library-for-go/blob/main/apps/internal/oauth/ops/authority/authority.go#L146
type NodeAgentPopTokenAuthScheme struct {
	*PopTokenAuthScheme
}

// Return the claim containg the pop token kid that will be added to the Entra access token.
func (a *NodeAgentPopTokenAuthScheme) TokenRequestParams() map[string]string {

	return a.PopTokenAuthScheme.TokenRequestParams()
}

// Return the keyId for MSAL to lookup for a cached access token. If it does not exist, MSAL will request a new access token
func (a *NodeAgentPopTokenAuthScheme) KeyID() string {
	return a.PopTokenAuthScheme.KeyID()
}

// Generate the pop token; adding in the accessToken generated by Entra.
func (a *NodeAgentPopTokenAuthScheme) FormatAccessToken(accessToken string) (string, error) {
	return a.PopTokenAuthScheme.FormatAccessToken(accessToken)
}

// Return the token type. Must be "pop"
func (a *NodeAgentPopTokenAuthScheme) AccessTokenType() string {
	return a.PopTokenAuthScheme.AccessTokenType()
}

// Create a new instance of NodeAgentPopTokenAuthScheme.
// targetResourceId: the ARM resourceId representing the edge node machine. This is the Arc For Server resource Id and is part of the node entity.
// grpcObjectId: the uri to the grpc entity, e.g. container. This will be passed in as part of the grpc metadata.
func NewNodeAgentPopTokenAuthScheme(targetNodeId string, grpcObjectId string, rsaKeyPair *RsaKeyPair) (*NodeAgentPopTokenAuthScheme, error) {
	popTokenScheme, err := NewPopTokenAuthScheme(
		map[string]interface{}{
			"nodeid": targetNodeId,
			"p":      grpcObjectId,
			"nonce":  uuid.New().String(),
		},
		rsaKeyPair)
	if err != nil {
		return nil, err
	}

	return &NodeAgentPopTokenAuthScheme{
		PopTokenAuthScheme: popTokenScheme,
	}, nil
}
